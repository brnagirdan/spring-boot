buildscript {
}

configure(allprojects) {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply from: "${rootProject.projectDir}/publish-maven.gradle"

	group = 'org.springframework.bootstrap'

    sourceCompatibility=1.5
    targetCompatibility=1.5

	repositories {
		maven { url "http://repo.springsource.org/libs-release" }
		mavenLocal();
	}

	ext.springVersion="3.2.0.BUILD-SNAPSHOT"

	eclipse.classpath.file.whenMerged { classpath ->
		def nonExportedPaths = []

		// Don't export optional/provided projects
		nonExportedPaths += (optionalDeps + providedDeps).findAll{
			it instanceof ProjectDependency
		}.collect{
			"/" + it.dependencyProject.name
		};

		// Don't export optional/provided modules
		def optionalModuleVersionIdentifiers = (optionalDeps + providedDeps).findAll{
			it instanceof ExternalModuleDependency
		}.collect{
			new org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier(it.group, it.name, it.version)
		} as Set

			nonExportedPaths += configurations.testCompile.resolvedConfiguration.resolvedArtifacts.findAll{
			it.moduleVersion.id in optionalModuleVersionIdentifiers
		}.collect{
			it.file as String
		}

		// Don't export test dependency
		def testModuleVersionIdentifiers = configurations.testCompile.dependencies.findAll{
			it instanceof ExternalModuleDependency
		}.collect{
			new org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier(it.group, it.name, it.version)
		} as Set

		nonExportedPaths += configurations.testCompile.resolvedConfiguration.resolvedArtifacts.findAll{
			it.moduleVersion.id in testModuleVersionIdentifiers
		}.collect{
			it.file as String
		}
		classpath.entries.findAll { it.path in nonExportedPaths }*.exported = false
	}
}


configure(subprojects) { subproject ->
    apply from: "${rootProject.projectDir}/publish-maven.gradle"

    jar {
        manifest.attributes['Created-By'] =
            "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})"
        manifest.attributes['Implementation-Title'] = subproject.name
        manifest.attributes['Implementation-Version'] = subproject.version

        from("${rootProject.projectDir}/src/dist") {
            include "license.txt"
            include "notice.txt"
            into "META-INF"
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }
    }

	javadoc {
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		//options.overview = "${projectDir}/src/main/java/overview.html"
	}

	task sourcesJar(type: Jar, dependsOn:classes) {
		classifier = 'sources'
		from sourceSets.main.allJava.srcDirs
		include '**/*.java', '**/*.aj'
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	dependencies {
		testCompile("junit:junit:4.10")
		testCompile("org.hamcrest:hamcrest-all:1.3")
		testCompile("org.easymock:easymock:2.5.1")
	}
}

project('spring-bootstrap-core') {
	dependencies {
		compile("org.springframework:spring-core:$springVersion")
		compile("org.springframework:spring-context:$springVersion")
		compile("org.springframework:spring-webmvc:$springVersion", optional)
		compile("org.mortbay.jetty:jetty:6.1.26") { dep ->
            optional dep
            exclude module: 'servlet-api'
        }
		compile("org.mortbay.jetty:jetty-util:6.1.26", optional)
		compile("javax.servlet:javax.servlet-api:3.0.1", optional)
		compile("org.apache.tomcat.embed:tomcat-embed-core:7.0.30") { dep ->
            optional dep
            exclude module: 'servlet-api'
        }
	}
}

project('spring-bootstrap-autoconfigure') {
	dependencies {
		compile(project(":spring-bootstrap-core"))
		compile("org.springframework:spring-webmvc:$springVersion", optional)
		compile("org.mortbay.jetty:jetty:6.1.26") { dep ->
            optional dep
            exclude module: 'servlet-api'
        }
		compile("org.mortbay.jetty:jetty-util:6.1.26", optional)
		compile("javax.servlet:javax.servlet-api:3.0.1", optional)
		compile("org.apache.tomcat.embed:tomcat-embed-core:7.0.30") { dep ->
            optional dep
            exclude module: 'servlet-api'
        }
	}
}

project('spring-bootstrap-sample') {
	dependencies {
		compile(project(":spring-bootstrap-core"))
		compile("org.mortbay.jetty:jetty:6.1.26")
		compile("org.mortbay.jetty:jetty-util:6.1.26")
		compile("javax.servlet:javax.servlet-api:3.0.1")
	}
}

configure(rootProject) {
	task wrapper(type: Wrapper) {
	    description = 'Generates gradlew[.bat] scripts'
	    gradleVersion = '1.2'

	    doLast() {
	        def gradleOpts = "-XX:MaxPermSize=1024m -Xmx1024m"
	        def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256"
	        File wrapperFile = file('gradlew')
	        wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
	            "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
	        File wrapperBatFile = file('gradlew.bat')
	        wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
	            "set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
	    }
	}
}
