buildscript {
	repositories {
		maven { url "http://repo.springsource.org/plugins-release" }
	}
	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.3")
	}
}

configure(allprojects) {
	group = 'org.springframework.bootstrap'

	ext.springVersion="3.2.2.BUILD-SNAPSHOT"
	ext.gradleScriptDir = "${rootProject.projectDir}/gradle"

	apply plugin: "propdeps"
	apply plugin: "java"
	apply from: "${gradleScriptDir}/ide.gradle"

	sourceCompatibility=1.5
	targetCompatibility=1.5

	repositories {
		maven { url "http://repo.springsource.org/libs-release" }
		mavenLocal();
	}
}

configure(subprojects) { subproject ->
	apply from: "${gradleScriptDir}/publish-maven.gradle"

	jar {
		manifest.attributes['Created-By'] =
			"${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})"
		manifest.attributes['Implementation-Title'] = subproject.name
		manifest.attributes['Implementation-Version'] = subproject.version

		from("${rootProject.projectDir}/src/dist") {
			include "license.txt"
			include "notice.txt"
			into "META-INF"
			expand(copyright: new Date().format('yyyy'), version: project.version)
		}
	}

	javadoc {
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		//options.overview = "${projectDir}/src/main/java/overview.html"
	}

	task sourcesJar(type: Jar, dependsOn:classes) {
		classifier = 'sources'
		from sourceSets.main.allJava.srcDirs
		include '**/*.java', '**/*.aj'
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	dependencies {
		testCompile("junit:junit:4.10")
		testCompile("org.hamcrest:hamcrest-all:1.3")
		testCompile("org.easymock:easymock:2.5.1")
	}
}

project('spring-bootstrap-core') {
	dependencies {
		compile("org.springframework:spring-core:$springVersion")
		compile("org.springframework:spring-context:$springVersion")
		optional("org.springframework:spring-webmvc:$springVersion")
		optional("org.mortbay.jetty:jetty:6.1.26") {
			exclude module: 'servlet-api'
		}
		optional("org.mortbay.jetty:jetty-util:6.1.26")
		optional("javax.servlet:javax.servlet-api:3.0.1")
		optional("org.apache.tomcat.embed:tomcat-embed-core:7.0.30") {
			exclude module: 'servlet-api'
		}
	}
}

project('spring-bootstrap-autoconfigure') {
	dependencies {
		compile(project(":spring-bootstrap-core"))
		optional("org.springframework:spring-webmvc:$springVersion")
		optional("org.springframework:spring-jdbc:$springVersion")
		optional("org.springframework:spring-orm:$springVersion")
		optional("javax.persistence:persistence-api:1.0")
		optional("org.mortbay.jetty:jetty:6.1.26") {
			exclude module: 'servlet-api'
		}
		optional("org.mortbay.jetty:jetty-util:6.1.26")
		optional("javax.servlet:javax.servlet-api:3.0.1")
		optional("org.apache.tomcat.embed:tomcat-embed-core:7.0.30") {
			exclude module: 'servlet-api'
		}
	}
}

project('spring-bootstrap-sample') {
	configurations {
		all*.exclude group: "commons-logging", module: "commons-logging"
	}
	dependencies {
		compile(project(":spring-bootstrap-autoconfigure"))
		compile("org.springframework:spring-webmvc:$springVersion")
		compile("org.springframework:spring-orm:$springVersion")
		compile("org.springframework:spring-jdbc:$springVersion")
		compile("org.mortbay.jetty:jetty:6.1.26")
		compile("org.mortbay.jetty:jetty-util:6.1.26")
		compile("javax.servlet:javax.servlet-api:3.0.1")
		compile("org.hibernate:hibernate-entitymanager:4.1.9.Final")
		compile("org.springframework.data:spring-data-jpa:1.2.0.RELEASE") {
			exclude module: "spring-jdbc"
			exclude module: "spring-orm"
		}
		compile("org.slf4j:slf4j-api:1.7.2")
		compile("org.slf4j:jcl-over-slf4j:1.7.2")
		compile("ch.qos.logback:logback-classic:1.0.9")
		runtime("org.hsqldb:hsqldb:2.2.9")
	}
}

project('spring-bootstrap-simple-sample') {
	configurations {
		all*.exclude group: "commons-logging", module: "commons-logging"
	}
	dependencies {
		compile(project(":spring-bootstrap-autoconfigure"))
		compile("org.slf4j:slf4j-api:1.7.2")
		compile("org.slf4j:jcl-over-slf4j:1.7.2")
		compile("ch.qos.logback:logback-classic:1.0.9")
	}
}

configure(rootProject) {
	task wrapper(type: Wrapper) {
		description = 'Generates gradlew[.bat] scripts'
		gradleVersion = '1.3'

		doLast() {
			def gradleOpts = "-XX:MaxPermSize=1024m -Xmx1024m"
			def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256"
			File wrapperFile = file('gradlew')
			wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
				"GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
			File wrapperBatFile = file('gradlew.bat')
			wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
				"set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
		}
	}
}
