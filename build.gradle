buildscript {
}

configure(subprojects) { subproject ->
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply from: "${rootProject.projectDir}/publish-maven.gradle"

	eclipse.classpath.file.whenMerged { classpath ->
		def nonExportedPaths = []

		// Don't export optional/provided projects
		nonExportedPaths += (optionalDeps + providedDeps).findAll{
			it instanceof ProjectDependency
		}.collect{
			"/" + it.dependencyProject.name
		};

		// Don't export optional/provided modules
		def optionalModuleVersionIdentifiers = (optionalDeps + providedDeps).findAll{
			it instanceof ExternalModuleDependency
		}.collect{
			new org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier(it.group, it.name, it.version)
		} as Set

			nonExportedPaths += configurations.testCompile.resolvedConfiguration.resolvedArtifacts.findAll{
			it.moduleVersion.id in optionalModuleVersionIdentifiers
		}.collect{
			it.file as String
		}

		// Don't export test dependency
		def testModuleVersionIdentifiers = configurations.testCompile.dependencies.findAll{
			it instanceof ExternalModuleDependency
		}.collect{
			new org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier(it.group, it.name, it.version)
		} as Set

		nonExportedPaths += configurations.testCompile.resolvedConfiguration.resolvedArtifacts.findAll{
			it.moduleVersion.id in testModuleVersionIdentifiers
		}.collect{
			it.file as String
		}
		classpath.entries.findAll { it.path in nonExportedPaths }*.exported = false
	}

    sourceCompatibility=1.5
    targetCompatibility=1.5

	ext.springVersion="3.2.0.BUILD-SNAPSHOT"

	repositories {
		maven { url "http://repo.springsource.org/libs-release" }
		mavenLocal();
	}

	dependencies {
		testCompile("junit:junit:4.10")
		testCompile("org.hamcrest:hamcrest-all:1.3")
		testCompile("org.easymock:easymock:2.5.1")
	}
}

project('spring-bootstrap') {
	dependencies {
		compile("org.springframework:spring-core:$springVersion")
		compile("org.springframework:spring-webmvc:$springVersion")
		compile("org.mortbay.jetty:jetty:6.1.26", provided)
		compile("org.mortbay.jetty:jetty-util:6.1.26", provided)
		compile("javax.servlet:javax.servlet-api:3.0.1", provided)
	}
}

project('spring-bootstrap-sample') {
	dependencies {
		compile(project(":spring-bootstrap"))
		compile("org.mortbay.jetty:jetty:6.1.26")
		compile("org.mortbay.jetty:jetty-util:6.1.26")
		compile("javax.servlet:javax.servlet-api:3.0.1")
	}
}

configure(rootProject) {
	task wrapper(type: Wrapper) {
	    description = 'Generates gradlew[.bat] scripts'
	    gradleVersion = '1.2'

	    doLast() {
	        def gradleOpts = "-XX:MaxPermSize=1024m -Xmx1024m"
	        def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256"
	        File wrapperFile = file('gradlew')
	        wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
	            "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
	        File wrapperBatFile = file('gradlew.bat')
	        wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
	            "set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
	    }
	}
}
